import 'dart:math';

import 'package:task_manager/models/task.dart';
import 'package:uuid/uuid.dart';

class AIService {

  Future<List<Task>> generateTasksFromPrompt(
    String prompt,
    String projectId,
  ) async {
    // Simulate AI processing
    await Future.delayed(const Duration(seconds: 2));

    final tasks = <Task>[];
    final now = DateTime.now();

    // Parse prompt and generate relevant tasks
    if (prompt.toLowerCase().contains('work')) {
      tasks.addAll(_generateWorkTasks(projectId, now));
    }

    if (prompt.toLowerCase().contains('wellness') ||
        prompt.toLowerCase().contains('health')) {
      tasks.addAll(_generateWellnessTasks(projectId, now));
    }

    if (prompt.toLowerCase().contains('week') ||
        prompt.toLowerCase().contains('plan')) {
      tasks.addAll(_generateWeeklyTasks(projectId, now));
    }

    // If no specific keywords, generate general tasks
    if (tasks.isEmpty) {
      tasks.addAll(_generateGeneralTasks(prompt, projectId, now));
    }

    return tasks;
  }

  List<Task> _generateWorkTasks(String projectId, DateTime now) {
    final workTasks = [
      'Review quarterly reports',
      'Prepare presentation for client meeting',
      'Update project documentation',
      'Code review for new features',
      'Team standup meeting',
      'Email follow-ups with stakeholders',
      'Research competitor analysis',
      'Update project timeline',
    ];

    return _createTasksFromTitles(workTasks, projectId, now, TaskPriority.high);
  }

  List<Task> _generateWellnessTasks(String projectId, DateTime now) {
    final wellnessTasks = [
      'Morning meditation (10 minutes)',
      'Go for a 30-minute walk',
      'Drink 8 glasses of water',
      'Prepare a healthy lunch',
      'Evening stretching routine',
      'Read for 20 minutes before bed',
      'Practice gratitude journaling',
      'Take vitamin supplements',
    ];

    return _createTasksFromTitles(
      wellnessTasks,
      projectId,
      now,
      TaskPriority.medium,
    );
  }

  List<Task> _generateWeeklyTasks(String projectId, DateTime now) {
    final weeklyTasks = [
      'Plan meals for the week',
      'Grocery shopping',
      'Clean and organize workspace',
      'Review weekly goals',
      'Schedule important meetings',
      'Backup computer files',
      'Review and pay bills',
      'Plan weekend activities',
    ];

    return _createTasksFromTitles(
      weeklyTasks,
      projectId,
      now,
      TaskPriority.medium,
    );
  }

  List<Task> _generateGeneralTasks(
    String prompt,
    String projectId,
    DateTime now,
  ) {
    // Simple keyword-based task generation
    final generalTasks = [
      'Break down: ${prompt.length > 50 ? prompt.substring(0, 50) + '...' : prompt}',
      'Research requirements',
      'Create action plan',
      'Set up timeline',
      'Gather necessary resources',
    ];

    return _createTasksFromTitles(
      generalTasks,
      projectId,
      now,
      TaskPriority.medium,
    );
  }

  List<Task> _createTasksFromTitles(
    List<String> titles,
    String projectId,
    DateTime now,
    TaskPriority priority,
  ) {
    final tasks = <Task>[];
    final random = Random();

    for (int i = 0; i < min(titles.length, 5); i++) {
      final title = titles[i];
      final dueDate = now.add(Duration(days: random.nextInt(7) + 1));

      tasks.add(
        Task(
          id: const Uuid().v4(),
          title: title,
          description: 'Generated by AI Assistant based on your request',
          projectId: projectId,
          priority: priority,
          status: TaskStatus.pending,
          dueDate: dueDate,
          createdAt: now,
          updatedAt: now,
        ),
      );
    }

    return tasks;
  }

  Future<String> suggestReschedule(Task task) async {
    // Simulate AI processing
    await Future.delayed(const Duration(seconds: 1));

    final now = DateTime.now();
    final suggestions = [
      'Tomorrow at 10:00 AM - You usually have good focus in the morning',
      'Next Monday at 2:00 PM - Your calendar looks lighter that day',
      'This weekend at 9:00 AM - Perfect time for focused work',
      'End of this week at 3:00 PM - Good timing before the weekend',
      'Next Tuesday at 11:00 AM - Based on your productivity patterns',
    ];

    return suggestions[now.millisecond % suggestions.length];
  }
}
